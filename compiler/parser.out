Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> module
Rule 1     module -> statements
Rule 2     statements -> endofstmt
Rule 3     statements -> statement endofstmt
Rule 4     statements -> statements endofstmt
Rule 5     statements -> statements statement endofstmt
Rule 6     endofstmt -> EOF
Rule 7     endofstmt -> NEWLINE
Rule 8     endofstmt -> NEWLINE EOF
Rule 9     statement -> PRINT expression
Rule 10    statement -> NAME EQUALS expression
Rule 11    statement -> expression
Rule 12    expression -> CONST
Rule 13    expression -> NAME
Rule 14    expression -> expression PLUS expression
Rule 15    expression -> MINUS expression
Rule 16    expression -> INPUT LPAREN RPAREN
Rule 17    expression -> LPAREN expression RPAREN

Terminals, with rules where they appear

CONST                : 12
EOF                  : 6 8
EQUALS               : 10
INPUT                : 16
LPAREN               : 16 17
MINUS                : 15
NAME                 : 10 13
NEWLINE              : 7 8
PLUS                 : 14
PRINT                : 9
RPAREN               : 16 17
error                : 

Nonterminals, with rules where they appear

endofstmt            : 2 3 4 5
expression           : 9 10 11 14 14 15 17
module               : 0
statement            : 3 5
statements           : 1 4 5

Parsing method: LALR

state 0

    (0) S' -> . module
    (1) module -> . statements
    (2) statements -> . endofstmt
    (3) statements -> . statement endofstmt
    (4) statements -> . statements endofstmt
    (5) statements -> . statements statement endofstmt
    (6) endofstmt -> . EOF
    (7) endofstmt -> . NEWLINE
    (8) endofstmt -> . NEWLINE EOF
    (9) statement -> . PRINT expression
    (10) statement -> . NAME EQUALS expression
    (11) statement -> . expression
    (12) expression -> . CONST
    (13) expression -> . NAME
    (14) expression -> . expression PLUS expression
    (15) expression -> . MINUS expression
    (16) expression -> . INPUT LPAREN RPAREN
    (17) expression -> . LPAREN expression RPAREN

    EOF             shift and go to state 4
    NEWLINE         shift and go to state 5
    PRINT           shift and go to state 9
    NAME            shift and go to state 13
    CONST           shift and go to state 10
    MINUS           shift and go to state 12
    INPUT           shift and go to state 8
    LPAREN          shift and go to state 1

    expression                     shift and go to state 11
    endofstmt                      shift and go to state 2
    statements                     shift and go to state 3
    statement                      shift and go to state 7
    module                         shift and go to state 6

state 1

    (17) expression -> LPAREN . expression RPAREN
    (12) expression -> . CONST
    (13) expression -> . NAME
    (14) expression -> . expression PLUS expression
    (15) expression -> . MINUS expression
    (16) expression -> . INPUT LPAREN RPAREN
    (17) expression -> . LPAREN expression RPAREN

    CONST           shift and go to state 10
    NAME            shift and go to state 14
    MINUS           shift and go to state 12
    INPUT           shift and go to state 8
    LPAREN          shift and go to state 1

    expression                     shift and go to state 15

state 2

    (2) statements -> endofstmt .

    EOF             reduce using rule 2 (statements -> endofstmt .)
    NEWLINE         reduce using rule 2 (statements -> endofstmt .)
    PRINT           reduce using rule 2 (statements -> endofstmt .)
    NAME            reduce using rule 2 (statements -> endofstmt .)
    CONST           reduce using rule 2 (statements -> endofstmt .)
    MINUS           reduce using rule 2 (statements -> endofstmt .)
    INPUT           reduce using rule 2 (statements -> endofstmt .)
    LPAREN          reduce using rule 2 (statements -> endofstmt .)
    $end            reduce using rule 2 (statements -> endofstmt .)


state 3

    (1) module -> statements .
    (4) statements -> statements . endofstmt
    (5) statements -> statements . statement endofstmt
    (6) endofstmt -> . EOF
    (7) endofstmt -> . NEWLINE
    (8) endofstmt -> . NEWLINE EOF
    (9) statement -> . PRINT expression
    (10) statement -> . NAME EQUALS expression
    (11) statement -> . expression
    (12) expression -> . CONST
    (13) expression -> . NAME
    (14) expression -> . expression PLUS expression
    (15) expression -> . MINUS expression
    (16) expression -> . INPUT LPAREN RPAREN
    (17) expression -> . LPAREN expression RPAREN

    $end            reduce using rule 1 (module -> statements .)
    EOF             shift and go to state 4
    NEWLINE         shift and go to state 5
    PRINT           shift and go to state 9
    NAME            shift and go to state 13
    CONST           shift and go to state 10
    MINUS           shift and go to state 12
    INPUT           shift and go to state 8
    LPAREN          shift and go to state 1

    expression                     shift and go to state 11
    endofstmt                      shift and go to state 16
    statement                      shift and go to state 17

state 4

    (6) endofstmt -> EOF .

    EOF             reduce using rule 6 (endofstmt -> EOF .)
    NEWLINE         reduce using rule 6 (endofstmt -> EOF .)
    PRINT           reduce using rule 6 (endofstmt -> EOF .)
    NAME            reduce using rule 6 (endofstmt -> EOF .)
    CONST           reduce using rule 6 (endofstmt -> EOF .)
    MINUS           reduce using rule 6 (endofstmt -> EOF .)
    INPUT           reduce using rule 6 (endofstmt -> EOF .)
    LPAREN          reduce using rule 6 (endofstmt -> EOF .)
    $end            reduce using rule 6 (endofstmt -> EOF .)


state 5

    (7) endofstmt -> NEWLINE .
    (8) endofstmt -> NEWLINE . EOF

  ! shift/reduce conflict for EOF resolved as shift
    NEWLINE         reduce using rule 7 (endofstmt -> NEWLINE .)
    PRINT           reduce using rule 7 (endofstmt -> NEWLINE .)
    NAME            reduce using rule 7 (endofstmt -> NEWLINE .)
    CONST           reduce using rule 7 (endofstmt -> NEWLINE .)
    MINUS           reduce using rule 7 (endofstmt -> NEWLINE .)
    INPUT           reduce using rule 7 (endofstmt -> NEWLINE .)
    LPAREN          reduce using rule 7 (endofstmt -> NEWLINE .)
    $end            reduce using rule 7 (endofstmt -> NEWLINE .)
    EOF             shift and go to state 18

  ! EOF             [ reduce using rule 7 (endofstmt -> NEWLINE .) ]


state 6

    (0) S' -> module .



state 7

    (3) statements -> statement . endofstmt
    (6) endofstmt -> . EOF
    (7) endofstmt -> . NEWLINE
    (8) endofstmt -> . NEWLINE EOF

    EOF             shift and go to state 4
    NEWLINE         shift and go to state 5

    endofstmt                      shift and go to state 19

state 8

    (16) expression -> INPUT . LPAREN RPAREN

    LPAREN          shift and go to state 20


state 9

    (9) statement -> PRINT . expression
    (12) expression -> . CONST
    (13) expression -> . NAME
    (14) expression -> . expression PLUS expression
    (15) expression -> . MINUS expression
    (16) expression -> . INPUT LPAREN RPAREN
    (17) expression -> . LPAREN expression RPAREN

    CONST           shift and go to state 10
    NAME            shift and go to state 14
    MINUS           shift and go to state 12
    INPUT           shift and go to state 8
    LPAREN          shift and go to state 1

    expression                     shift and go to state 21

state 10

    (12) expression -> CONST .

    PLUS            reduce using rule 12 (expression -> CONST .)
    EOF             reduce using rule 12 (expression -> CONST .)
    NEWLINE         reduce using rule 12 (expression -> CONST .)
    RPAREN          reduce using rule 12 (expression -> CONST .)


state 11

    (11) statement -> expression .
    (14) expression -> expression . PLUS expression

    EOF             reduce using rule 11 (statement -> expression .)
    NEWLINE         reduce using rule 11 (statement -> expression .)
    PLUS            shift and go to state 22


state 12

    (15) expression -> MINUS . expression
    (12) expression -> . CONST
    (13) expression -> . NAME
    (14) expression -> . expression PLUS expression
    (15) expression -> . MINUS expression
    (16) expression -> . INPUT LPAREN RPAREN
    (17) expression -> . LPAREN expression RPAREN

    CONST           shift and go to state 10
    NAME            shift and go to state 14
    MINUS           shift and go to state 12
    INPUT           shift and go to state 8
    LPAREN          shift and go to state 1

    expression                     shift and go to state 23

state 13

    (10) statement -> NAME . EQUALS expression
    (13) expression -> NAME .

    EQUALS          shift and go to state 24
    PLUS            reduce using rule 13 (expression -> NAME .)
    EOF             reduce using rule 13 (expression -> NAME .)
    NEWLINE         reduce using rule 13 (expression -> NAME .)


state 14

    (13) expression -> NAME .

    PLUS            reduce using rule 13 (expression -> NAME .)
    EOF             reduce using rule 13 (expression -> NAME .)
    NEWLINE         reduce using rule 13 (expression -> NAME .)
    RPAREN          reduce using rule 13 (expression -> NAME .)


state 15

    (17) expression -> LPAREN expression . RPAREN
    (14) expression -> expression . PLUS expression

    RPAREN          shift and go to state 25
    PLUS            shift and go to state 22


state 16

    (4) statements -> statements endofstmt .

    EOF             reduce using rule 4 (statements -> statements endofstmt .)
    NEWLINE         reduce using rule 4 (statements -> statements endofstmt .)
    PRINT           reduce using rule 4 (statements -> statements endofstmt .)
    NAME            reduce using rule 4 (statements -> statements endofstmt .)
    CONST           reduce using rule 4 (statements -> statements endofstmt .)
    MINUS           reduce using rule 4 (statements -> statements endofstmt .)
    INPUT           reduce using rule 4 (statements -> statements endofstmt .)
    LPAREN          reduce using rule 4 (statements -> statements endofstmt .)
    $end            reduce using rule 4 (statements -> statements endofstmt .)


state 17

    (5) statements -> statements statement . endofstmt
    (6) endofstmt -> . EOF
    (7) endofstmt -> . NEWLINE
    (8) endofstmt -> . NEWLINE EOF

    EOF             shift and go to state 4
    NEWLINE         shift and go to state 5

    endofstmt                      shift and go to state 26

state 18

    (8) endofstmt -> NEWLINE EOF .

    EOF             reduce using rule 8 (endofstmt -> NEWLINE EOF .)
    NEWLINE         reduce using rule 8 (endofstmt -> NEWLINE EOF .)
    PRINT           reduce using rule 8 (endofstmt -> NEWLINE EOF .)
    NAME            reduce using rule 8 (endofstmt -> NEWLINE EOF .)
    CONST           reduce using rule 8 (endofstmt -> NEWLINE EOF .)
    MINUS           reduce using rule 8 (endofstmt -> NEWLINE EOF .)
    INPUT           reduce using rule 8 (endofstmt -> NEWLINE EOF .)
    LPAREN          reduce using rule 8 (endofstmt -> NEWLINE EOF .)
    $end            reduce using rule 8 (endofstmt -> NEWLINE EOF .)


state 19

    (3) statements -> statement endofstmt .

    EOF             reduce using rule 3 (statements -> statement endofstmt .)
    NEWLINE         reduce using rule 3 (statements -> statement endofstmt .)
    PRINT           reduce using rule 3 (statements -> statement endofstmt .)
    NAME            reduce using rule 3 (statements -> statement endofstmt .)
    CONST           reduce using rule 3 (statements -> statement endofstmt .)
    MINUS           reduce using rule 3 (statements -> statement endofstmt .)
    INPUT           reduce using rule 3 (statements -> statement endofstmt .)
    LPAREN          reduce using rule 3 (statements -> statement endofstmt .)
    $end            reduce using rule 3 (statements -> statement endofstmt .)


state 20

    (16) expression -> INPUT LPAREN . RPAREN

    RPAREN          shift and go to state 27


state 21

    (9) statement -> PRINT expression .
    (14) expression -> expression . PLUS expression

    EOF             reduce using rule 9 (statement -> PRINT expression .)
    NEWLINE         reduce using rule 9 (statement -> PRINT expression .)
    PLUS            shift and go to state 22


state 22

    (14) expression -> expression PLUS . expression
    (12) expression -> . CONST
    (13) expression -> . NAME
    (14) expression -> . expression PLUS expression
    (15) expression -> . MINUS expression
    (16) expression -> . INPUT LPAREN RPAREN
    (17) expression -> . LPAREN expression RPAREN

    CONST           shift and go to state 10
    NAME            shift and go to state 14
    MINUS           shift and go to state 12
    INPUT           shift and go to state 8
    LPAREN          shift and go to state 1

    expression                     shift and go to state 28

state 23

    (15) expression -> MINUS expression .
    (14) expression -> expression . PLUS expression

    PLUS            reduce using rule 15 (expression -> MINUS expression .)
    EOF             reduce using rule 15 (expression -> MINUS expression .)
    NEWLINE         reduce using rule 15 (expression -> MINUS expression .)
    RPAREN          reduce using rule 15 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 22 ]


state 24

    (10) statement -> NAME EQUALS . expression
    (12) expression -> . CONST
    (13) expression -> . NAME
    (14) expression -> . expression PLUS expression
    (15) expression -> . MINUS expression
    (16) expression -> . INPUT LPAREN RPAREN
    (17) expression -> . LPAREN expression RPAREN

    CONST           shift and go to state 10
    NAME            shift and go to state 14
    MINUS           shift and go to state 12
    INPUT           shift and go to state 8
    LPAREN          shift and go to state 1

    expression                     shift and go to state 29

state 25

    (17) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 17 (expression -> LPAREN expression RPAREN .)
    EOF             reduce using rule 17 (expression -> LPAREN expression RPAREN .)
    NEWLINE         reduce using rule 17 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 17 (expression -> LPAREN expression RPAREN .)


state 26

    (5) statements -> statements statement endofstmt .

    EOF             reduce using rule 5 (statements -> statements statement endofstmt .)
    NEWLINE         reduce using rule 5 (statements -> statements statement endofstmt .)
    PRINT           reduce using rule 5 (statements -> statements statement endofstmt .)
    NAME            reduce using rule 5 (statements -> statements statement endofstmt .)
    CONST           reduce using rule 5 (statements -> statements statement endofstmt .)
    MINUS           reduce using rule 5 (statements -> statements statement endofstmt .)
    INPUT           reduce using rule 5 (statements -> statements statement endofstmt .)
    LPAREN          reduce using rule 5 (statements -> statements statement endofstmt .)
    $end            reduce using rule 5 (statements -> statements statement endofstmt .)


state 27

    (16) expression -> INPUT LPAREN RPAREN .

    PLUS            reduce using rule 16 (expression -> INPUT LPAREN RPAREN .)
    EOF             reduce using rule 16 (expression -> INPUT LPAREN RPAREN .)
    NEWLINE         reduce using rule 16 (expression -> INPUT LPAREN RPAREN .)
    RPAREN          reduce using rule 16 (expression -> INPUT LPAREN RPAREN .)


state 28

    (14) expression -> expression PLUS expression .
    (14) expression -> expression . PLUS expression

    PLUS            reduce using rule 14 (expression -> expression PLUS expression .)
    EOF             reduce using rule 14 (expression -> expression PLUS expression .)
    NEWLINE         reduce using rule 14 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 14 (expression -> expression PLUS expression .)

  ! PLUS            [ shift and go to state 22 ]


state 29

    (10) statement -> NAME EQUALS expression .
    (14) expression -> expression . PLUS expression

    EOF             reduce using rule 10 (statement -> NAME EQUALS expression .)
    NEWLINE         reduce using rule 10 (statement -> NAME EQUALS expression .)
    PLUS            shift and go to state 22

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for EOF in state 5 resolved as shift
